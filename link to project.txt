https://github.com/KhintonASU/FSE-Master-Coding-Project.git

const pointss = [];
let dragPPoint = null;
const dragRRadius = 40;
let startTTime;
let timerVValue = 20;
let displayYYes = false; // Flag to track if "YES" has been displayed
let gameEEnded = false; // Flag to track if the game has ended

const numPointss = 4;
const toleranceRRange = 100; // Tolerance range for x-coordinate comparison

// Store the x-coordinates of the static shapes and their tolerance range
const staticSShapeX = [
  { x: 80, tolerance: toleranceRRange },
  { x: 140, tolerance: toleranceRRange },
  { x: 220, tolerance: toleranceRRange },
  { x: 320, tolerance: toleranceRRange }
];

function setup() {
  createCanvas(400, 400);
  for (let i = 0; i < numPointss; i++) {
    pointss.push(createVector((80 * i) + 80, 200));
  }
  shuffle(pointss, true); // Shuffle the pointss array
  startTTime = millis();
}

function draw() {
  background(220);
  stroke('#000');

  // Draw shapes
  fill('#FF0000');
  circle(80, 100, 40);
  fill('#FFAA00');
  square(140, 80, 40);
  fill('#008FFF');
  triangle(220, 120, 240, 80, 260, 120);
  fill('#0CFF00');
  circle(320, 100, 40);

  // Draw draggable shapes
  for (let i = 0; i < pointss.length; i++) {
    if (i === 0) {
      fill('#FF0000'); // Red circle
      circle(pointss[i].x, pointss[i].y, dragRRadius);
    } else if (i === 1) {
      fill('#FFAA00'); // Orange square
      square(pointss[i].x - dragRRadius / 2, pointss[i].y - dragRRadius / 2, dragRRadius);
    } else if (i === 2) {
      fill('#008FFF'); // Blue triangle
      triangle(pointss[i].x, pointss[i].y - dragRRadius / 2,
               pointss[i].x - dragRRadius / 2, pointss[i].y + dragRRadius / 2,
               pointss[i].x + dragRRadius / 2, pointss[i].y + dragRRadius / 2);
    } else if (i === 3) {
      fill('#0CFF00'); // Green circle
      circle(pointss[i].x, pointss[i].y, dragRRadius);
    }
  }
 
  // Update timer
  let elapsedTTime = (millis() - startTTime) / 1000;
  let remainingTTime = max(timerVValue - elapsedTTime, 0);

  // Display timer
  fill('#000');
  textSize(20);
  text("Time left: " + remainingTTime.toFixed(1), 20, 30);

  // Display instructions
  textSize(16);
  fill('#000');
  text("Instructions: Match the order of the bottom shapes", 20, 310);
  text("to the top ones", 105, 330);
 
  // Check if shapes are in the correct order from left to right
  let correctOOrder = true;
  for (let i = 0; i < staticSShapeX.length - 1; i++) {
    if (pointss[i].x > pointss[i + 1].x) {
      correctOOrder = false;
      break;
    }
  }

  // End game if timer reaches zero or "YES" is displayed
  if (correctOOrder && !displayYYes) {
    fill('#00FF00');
    text("YES", 250, 300);
    displayYYes = true;
    gameEEnded = true; // Set gameEEnded flag to true
  } else if (!correctOOrder && remainingTTime === 0) {
    fill('#FF0000');
    text("Time ran out, you lost!", 150, 300);
    gameEEnded = true; // Set gameEEnded flag to true
  }

  // End game if timer reaches zero or "YES" is displayed
  if (gameEEnded) {
    noLoop(); // Stop the draw loop
    background(220); // Clear the canvas
   
    // Display time taken and "You win!" or "You lost!" message
    if (displayYYes) {
      let timeTTaken = 20 - remainingTTime;
      text("Time taken: " + timeTTaken.toFixed(1) + " seconds", 125, 200);
      text("You win!", 170, 250);
    } else {
      text("Time ran out, you lost!", 125, 250);
    }

    // Restart button
    fill(0);
    rect(150, 300, 100, 40);
    fill(255);
    textSize(16);
    text("Restart", 175, 325);
  }
}

function mousePressed() {
  if (gameEEnded && mouseX > 150 && mouseX < 250 && mouseY > 300 && mouseY < 340) {
    restartGGame();
  } else {
    for (let i = 0; i < pointss.length; i++) {
      const isPPressed = mouseInShape(pointss[i], i, dragRRadius);
      if (isPPressed) {
        dragPPoint = i;
        break;
      }
    }
  }
}

function mouseDragged() {
  if (dragPPoint !== null) {
    pointss[dragPPoint].x = mouseX;
    pointss[dragPPoint].y = mouseY;
  }
}

function mouseReleased() {
  dragPPoint = null;
}

function mouseInShape(pos, index, radius) {
  return dist(mouseX, mouseY, pos.x, pos.y) < radius;
}

function restartGGame() {
  pointss.length = 0; // Clear the pointss array
  for (let i = 0; i < numPointss; i++) {
    pointss.push(createVector((80 * i) + 80, 200));
  }
  shuffle(pointss, true); // Shuffle the pointss array
  startTTime = millis();
  displayYYes = false;
  gameEEnded = false;
  loop(); // Restart the draw loop
}
